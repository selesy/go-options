//go:build testing

package test

// Code generated by github.com/selesy/go-options.  DO NOT EDIT.

import "fmt"

import "github.com/google/go-cmp/cmp"

type ApplyBuildOptionFunc func(c *configWithBuild) error

func (f ApplyBuildOptionFunc) apply(c *configWithBuild) error {
	return f(c)
}

func newConfigWithBuild(options ...BuildOption) (configWithBuild, error) {
	var c configWithBuild
	err := applyBuild(&c, options...)
	return c, err
}

func applyBuild(c *configWithBuild, options ...BuildOption) error {
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type BuildOption interface {
	apply(*configWithBuild) error
}

type buildOptMyIntImpl struct {
	o int
}

func (o buildOptMyIntImpl) apply(c *configWithBuild) error {
	c.myInt = o.o
	return nil
}

func (o buildOptMyIntImpl) Equal(v buildOptMyIntImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o buildOptMyIntImpl) String() string {
	name := "BuildOptMyInt"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func BuildOptMyInt(o int) BuildOption {
	return buildOptMyIntImpl{
		o: o,
	}
}
